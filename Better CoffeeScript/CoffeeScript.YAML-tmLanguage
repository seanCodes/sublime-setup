comment: 'CoffeeScript Syntax: version 1'
name: CoffeeScript
scopeName: source.coffee
fileTypes:
- coffee
- Cakefile
- coffee.erb
- cson
- cjsx
firstLineMatch: ^#!.*\bcoffee
foldingStartMarker: ^\s*class\s+\S.*$|.*(->|=>)\s*$|.*[\[{]\s*$
foldingStopMarker: ^\s*$|^\s*[}\]]\s*$
keyEquivalent: ^~C
patterns:
  # meta.inline.function.coffee
  # match stuff like: a -> â€¦
  - match: (\([^()]*?\))\s*([=-]>)
    captures:
      '1': {name: variable.parameter.function.coffee}
      '2': {name: storage.type.function.coffee}
  # meta.class.instance.constructor
  - match: (new)\s+((?!class)\w+(?:\.\w*)*)
    captures:
      '1': {name: keyword.operator.new.coffee}
      '2': {name: support.class.coffee}
  # string.quoted.heredoc.coffee
  - begin: ''''''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.coffee}
    end: ''''''''
    endCaptures:
      '0': {name: punctuation.definition.string.end.coffee}
  # string.quoted.double.heredoc.coffee
  - begin: '"""'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.coffee}
    end: '"""'
    endCaptures:
      '0': {name: punctuation.definition.string.end.coffee}
    patterns:
    # constant.character.escape.coffee
    - match: \\.
    - include: '#interpolated_coffee'
  # string.quoted.script.coffee
  - begin: '`'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.coffee}
    end: '`'
    endCaptures:
      '0': {name: punctuation.definition.string.end.coffee}
    patterns:
    # constant.character.escape.coffee
    - match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
  # comment.block.coffee
  - begin: (?<!#)###(?!#)
    captures:
      '0': {name: punctuation.definition.comment.coffee}
    end: '###(?:[ \t]*\n)'
    patterns:
    # storage.type.annotation.coffeescript
    - match: '@\w*'
  # comment.line.number-sign.coffee
  - match: (#)(?!\{).*$\n?
    captures:
      '1': {name: punctuation.definition.comment.coffee}
  # string.regexp.coffee
  - begin: /{3}
    end: /{3}[imgy]{0,4}
    patterns:
    - include: '#interpolated_coffee'
    - include: '#embedded_comment'
  # string.regexp.coffee
  - match: /(?![\s=/*+{}?])(\\.|.)*?/[igmy]{0,4}(?![a-zA-Z0-9])
  # keyword.control.coffee
  - match: >-
      (?x)
      \b(?&lt;![\.\$])(
        break|by|catch|continue|else|finally|for|in|of|if|return|yield|switch|
        then|throw|try|unless|when|while|until|loop|do|(?&lt;=for)\s+own
      )(?!\s*:)\b
  # keyword.operator.coffee
  - match: >-
      (?x)
      and=|or=|!|%|&amp;|\^|\*|\/|(\-)?\-(?!&gt;)|\+\+|\+|~|==|=(?!&gt;)|!=|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|
      &gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\.\.(\.)?|\?|\||\|\||\:|\*=|(?&lt;!\()/=|%=|\+=|\-=|&amp;=|
      \^=|\b(?&lt;![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\b
  # variable.assignment.coffee
  - match: ([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)>)))
    captures:
      '1': {name: variable.assignment.coffee}
      '4': {name: punctuation.separator.key-value}
      '5': {name: keyword.operator.coffee}
  # meta.variable.assignment.destructured.coffee
  - begin: (?<=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])
    beginCaptures:
      '0': {name: keyword.operator.coffee}
    end: ([\]\}]\s*[:=])
    endCaptures:
      '0': {name: keyword.operator.coffee}
    patterns:
    - include: '#variable_name'
    - include: '#instance_variable'
    - include: '#single_quoted_string'
    - include: '#double_quoted_string'
    - include: '#numeric'
  # meta.function.coffee
  - match: >-
      (?x)
      (\s*)
      (?=[a-zA-Z\$_@])
      (
        [a-zA-Z\$_@](\w|\$|:|\.)*\s*
        (?=[:=]( (\s*.\( ($)) | (\s*\(.*\) )?\s*([=-]&gt;)))
      )
    captures:
      '2': {name: entity.name.function.coffee}
      '3': {name: entity.name.function.coffee}
      '4': {name: variable.parameter.function.coffee}
      '5': {name: storage.type.function.coffee}
  # meta.function.symbols.coffee
  - comment: Show well-known functions from Express and Mocha in Go To Symbol view
    begin: ^\s*(describe|it|app\.(get|post|put|all|del|delete))[^\w]
    end: $
    patterns:
    - include: $self
  # storage.type.function.coffee
  - match: '[=-]>'
  # constant.language.boolean.true.coffee
  - match: \b(?<!\.)(true|on|yes)(?!\s*[:=])\b
  # constant.language.boolean.false.coffee
  - match: \b(?<!\.)(false|off|no)(?!\s*[:=])\b
  # constant.language.null.coffee
  - match: \b(?<!\.)null(?!\s*[:=])\b
  # variable.language.coffee
  - match: \b(?<!\.)(this|extends)(?!\s*[:=])\b
  # meta.class.coffee
  - match: (class\b)\s+((?!extends)@?[a-zA-Z\$_][\w\.]*)?(?:\s*(extends)\s+(@?[a-zA-Z\$\._][\w\.]*))?
    captures:
      '1': {name: storage.type.class.coffee}
      '2': {name: entity.name.type.class.coffee}
      '3': {name: keyword.control.inheritance.coffee}
      '4': {name: entity.other.inherited-class.coffee}
  # keyword.other.coffee
  - match: \b(debugger|\\)\b
  # support.class.coffee
  - match: >-
      (?x)\b(
        Array|ArrayBuffer|Blob|Boolean|Date|document
        |event|Float(32|64)Array|Function|
        Int(8|16|32|64)Array|Math|Map|Number|
        Object|Proxy|RegExp|Set|String|WeakMap|
        window|Uint(8|16|32|64)Array|XMLHttpRequest|Symbol
      )\b
  # support.function.console.coffee
  - match: ((?<=console\.)(debug|warn|info|log|error|time|timeEnd|assert))\b
  # support.function.coffee
  - match: >-
      (?x)\b(
        decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require
      )\b
  # support.function.method.array.coffee
  - match: >-
      (?x)((?&lt;=\.)(
        apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|
        isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|
        reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|
        unshift|valueOf
      ))\b
  # support.function.static.array.coffee
  - match: >-
      (?x)((?&lt;=Array\.)(
        isArray
      ))\b
  # support.function.static.object.coffee
  - match: >-
      (?x)((?&lt;=Object\.)(
        create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|
        getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|
        isnt|keys|preventExtensions|seal
      ))\b
  # support.function.static.math.coffee
  - match: >-
      (?x)((?&lt;=Math\.)(
        abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|
        hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|
        tan|tanh|trunc
      ))\b
  # support.function.static.number.coffee
  - match: >-
      (?x)((?&lt;=Number\.)(
        is(Finite|Integer|NaN)|toInteger
      ))\b
  # constant.language.coffee
  - match: \b(Infinity|NaN|undefined)\b
  # punctuation.terminator.statement.coffee
  - match: \;
  # meta.delimiter.object.comma.coffee
  - match: ',[ |\t]*'
  # meta.delimiter.method.period.coffee
  - match: \.
  # meta.brace.curly.coffee
  - match: \{|\}
  # meta.brace.round.coffee
  - match: \(|\)
  # meta.brace.square.coffee
  - match: \[|\]\s*
  - include: '#instance_variable'
  - include: '#single_quoted_string'
  - include: '#double_quoted_string'
  - include: '#numeric'
repository:
  double_quoted_string:
    patterns:
    # string.quoted.double.coffee
    - begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      # constant.character.escape.coffee
      - match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
      - include: '#interpolated_coffee'
  embedded_comment:
    patterns:
    # comment.line.number-sign.coffee
    - match: (?<!\\)(#).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.coffee}
  instance_variable:
    patterns:
    # variable.other.readwrite.instance.coffee
    - match: (@)([a-zA-Z_\$]\w*)?
  interpolated_coffee:
    patterns:
    # source.coffee.embedded.source
    - begin: \#\{
      captures:
        '0': {name: punctuation.section.embedded.coffee}
      end: \}
      patterns:
      - include: $self
    # source.coffee.embedded.source
    - begin: <%
      captures:
        '0': {name: punctuation.section.embedded.coffee}
      end: '%>'
      patterns:
      - include: $self
  numeric:
    patterns:
    # constant.numeric.coffee
    - match: (?<!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b
  single_quoted_string:
    patterns:
    # string.quoted.single.coffee
    - begin: ''''
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: ''''
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      # constant.character.escape.coffee
      - match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)
  variable_name:
    patterns:
    # variable.assignment.coffee
    - match: ([a-zA-Z\$_]\w*(\.\w+)*)
      captures:
        '1': {name: variable.assignment.coffee}
