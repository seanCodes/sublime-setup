%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - coffee
  - Cakefile
  - coffee.erb
  - cson
  - cjsx
#
# > NOTE: This was _not_ part of the “Better CoffeeScript” package but is a port of the CoffeeScript
#   Textmate syntax to a Sublime Syntax.
#
# @author Sean Juárez <seanjcodes+coffeescriptsublime@gmail.com>
#
name: CoffeeScript Sublime
scope: source.coffee
first_line_match: ^#!.*\bcoffee
variables:
  identifier_escape: (?:\\u(?:\h{4}|\{\h+\}))
  identifier_start: (?:[_$\p{L}\p{Nl}]|{{identifier_escape}})
  identifier_part: (?:[_$\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]|{{identifier_escape}})
  identifier_break: (?!{{identifier_part}})

  identifier: (?:{{identifier_start}}{{identifier_part}}*{{identifier_break}})
  dollar_only_identifier: (?:\${{identifier_break}})
  dollar_identifier: (?:(\$){{identifier_part}}*{{identifier_break}})

  keyword: (?:break|by|catch|continue|else|finally|for|in|of|if|return|yield|switch|then|throw|try|unless|when|while|until|loop|do)
  keyword_for_own: (?<=for)\s+own
  operator_keyword: (?:instanceof|new|delete|typeof|and|or|is|isnt|not|super)

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
  # match stuff like: a -> …
  - match: (\([^()]*?\))\s*([=-]>)
    scope: meta.inline.function.coffee
    captures:
      1: variable.parameter.function.coffee
      2: storage.type.function.coffee
  - match: (new)\s+((?!class)\w+(?:\.\w*)*)
    scope: meta.class.instance.constructor
    captures:
      1: keyword.operator.new.coffee
      2: support.class.coffee
  - match: ''''''''
    scope: punctuation.definition.string.begin.coffee
    push:
      - meta_include_prototype: false
      - meta_scope: string.quoted.heredoc.coffee
      - match: ''''''''
        pop: true
        scope: punctuation.definition.string.end.coffee
  - match: '"""'
    scope: punctuation.definition.string.begin.coffee
    push:
      - meta_include_prototype: false
      - meta_scope: string.quoted.double.heredoc.coffee
      - match: '"""'
        pop: true
        scope: punctuation.definition.string.end.coffee
      - match: \\.
        scope: constant.character.escape.coffee
      - include: interpolated_coffee
  - match: '`'
    scope: punctuation.definition.string.begin.coffee
    push:
      - meta_include_prototype: false
      - meta_scope: string.quoted.script.coffee
      - match: '`'
        pop: true
        scope: punctuation.definition.string.end.coffee
      - match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
        scope: constant.character.escape.coffee
  - match: /{3}
    push:
      - meta_scope: string.regexp.coffee
      - meta_include_prototype: false
      - match: /{3}[imgy]{0,4}
        pop: true
      - include: interpolated_coffee
      - include: embedded_comment
      - include: scope:source.regexp.js
  - match: '/(?![\s=/*+{}?])'
    scope: punctuation.definition.string.begin.js
    push: regexp
  - match: >-
      (?x)
      \b(?<![\.\$])({{keyword}}|{{keyword_for_own}})(?!\s*:)\b
    scope: keyword.control.coffee
  - match: >-
      (?x)
      and=|or=|!|%|&|\^|\*|\/|(\-)?\-(?!>)|\+\+|\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|
      >>>=|<>|<|>|!|&&|\.\.(\.)?|\?|\||\|\||\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|
      \^=|\b(?<![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\b
    scope: keyword.operator.coffee
  - match: ([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)>)))
    captures:
      1: variable.assignment.coffee
      4: punctuation.separator.key-value
      5: keyword.operator.coffee
  - match: (?<=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])
    scope: keyword.operator.coffee
    push:
      - meta_scope: meta.variable.assignment.destructured.coffee
      - match: ([\]\}]\s*[:=])
        pop: true
        scope: keyword.operator.coffee
      - include: variable_name
      - include: instance_variable
      - include: single_quoted_string
      - include: double_quoted_string
      - include: numeric
  - match: >-
      (?x)
      (\s*)
      (?=[a-zA-Z\$_@])
      (
        [a-zA-Z\$_@](\w|\$|:|\.)*\s*
        (?=[:=]( (\s*.\( ($)) | (\s*\(.*\) )?\s*([=-]>)))
      )
    scope: meta.function.coffee
    captures:
      2: entity.name.function.coffee
      3: entity.name.function.coffee
      4: variable.parameter.function.coffee
      5: storage.type.function.coffee
  # Show well-known functions from Express and Mocha in Go To Symbol view
  - match: ^\s*(describe|it|app\.(get|post|put|all|del|delete))[^\w]
    push:
      - meta_scope: meta.function.symbols.coffee
      - match: $
        pop: true
      - include: main
  - match: '[=-]>'
    scope: storage.type.function.coffee
  - match: \b(?<!\.)(true|on|yes)(?!\s*[:=])\b
    scope: constant.language.boolean.true.coffee
  - match: \b(?<!\.)(false|off|no)(?!\s*[:=])\b
    scope: constant.language.boolean.false.coffee
  - match: \b(?<!\.)null(?!\s*[:=])\b
    scope: constant.language.null.coffee
  - match: \b(?<!\.)(this|extends)(?!\s*[:=])\b
    scope: variable.language.coffee
  - match: (class\b)\s+((?!extends)@?[a-zA-Z\$_][\w\.]*)?(?:\s*(extends)\s+(@?[a-zA-Z\$\._][\w\.]*))?
    scope: meta.class.coffee
    captures:
      1: storage.type.class.coffee
      2: entity.name.type.class.coffee
      3: keyword.control.inheritance.coffee
      4: entity.other.inherited-class.coffee
  - match: \b(debugger|\\)\b
    scope: keyword.other.coffee
  - match: >-
      (?x)\b(
        Array|ArrayBuffer|Blob|Boolean|Date|document
        |event|Float(32|64)Array|Function|
        Int(8|16|32|64)Array|Math|Map|Number|
        Object|Proxy|RegExp|Set|String|WeakMap|
        window|Uint(8|16|32|64)Array|XMLHttpRequest|Symbol
      )\b
    scope: support.class.coffee
  - match: ((?<=console\.)(debug|warn|info|log|error|time|timeEnd|assert))\b
    scope: support.function.console.coffee
  - match: >-
      (?x)\b(
        decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require
      )\b
    scope: support.function.coffee
  - match: >-
      (?x)((?<=\.)(
        apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|
        isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|
        reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|
        unshift|valueOf
      ))\b
    scope: support.function.method.array.coffee
  - match: >-
      (?x)((?<=Array\.)(
        isArray
      ))\b
    scope: support.function.static.array.coffee
  - match: >-
      (?x)((?<=Object\.)(
        create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|
        getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|
        isnt|keys|preventExtensions|seal
      ))\b
    scope: support.function.static.object.coffee
  - match: >-
      (?x)((?<=Math\.)(
        abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|
        hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|
        tan|tanh|trunc
      ))\b
    scope: support.function.static.math.coffee
  - match: >-
      (?x)((?<=Number\.)(
        is(Finite|Integer|NaN)|toInteger
      ))\b
    scope: support.function.static.number.coffee
  - match: \b(Infinity|NaN|undefined)\b
    scope: constant.language.coffee
  - match: \;
    scope: punctuation.terminator.statement.coffee
  - match: ',[ |\t]*'
    scope: meta.delimiter.object.comma.coffee
  - include: property-access
  - match: \.
    scope: meta.delimiter.method.period.coffee
  #- match: \{
  #  scope: meta.brace.curly.coffee
  #  set:
  #    - meta_scope: meta.block.js.coffee
  #    - match: \}
  #      scope: meta.brace.curly.coffee
  #      pop: true
  #    - include: main
  - match: \{|\}
    scope: meta.brace.curly.coffee
  - match: \(|\)
    scope: meta.brace.round.coffee
  - match: \[|\]\s*
    scope: meta.brace.square.coffee
  - include: instance_variable
  - include: single_quoted_string
  - include: double_quoted_string
  - include: numeric

  - include: literal-call

  #- match: '{{identifier}}'
  #  scope: bright.red


  ### EXISTING CONTEXTS


  double_quoted_string:
    - match: '"'
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.coffee
        - match: '"'
          pop: true
          scope: punctuation.definition.string.end.coffee
        - match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
          scope: constant.character.escape.coffee
        - include: interpolated_coffee
  embedded_comment:
    - include: comment-line
  instance_variable:
    - match: (@)([a-zA-Z_\$]\w*)?
      scope: variable.other.readwrite.instance.coffee
  interpolated_coffee:
    - match: \#\{
      scope: punctuation.section.embedded.coffee
      push:
        - meta_scope: source.coffee.embedded.source
        - match: \}
          scope: punctuation.section.embedded.coffee
          pop: true
        - include: main
          # with_prototype:
          #   - match: (?=\})
          #     pop: true
    - match: <%
      scope: punctuation.section.embedded.coffee
      push:
        - meta_scope: source.coffee.embedded.source
        - match: '%>'
          pop: true
        - include: main
  numeric:
    - match: (?<!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b
      scope: constant.numeric.coffee
  single_quoted_string:
    - match: ''''
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.coffee
        - match: ''''
          pop: true
          scope: punctuation.definition.string.end.coffee
        - match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)
          scope: constant.character.escape.coffee
  variable_name:
    - match: ([a-zA-Z\$_]\w*(\.\w+)*)
      captures:
        1: variable.assignment.coffee
      scope: variable.assignment.coffee


  ### REWORKED, EXISTING CONTEXTS


  comments:
    - include: comment-block
    - include: comment-line
  comment-block:
    - match: '###(?!#)'
      scope: punctuation.definition.comment.begin.coffee
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.coffee
        - match: '###'
          scope: punctuation.definition.comment.end.coffee
          pop: true
        - match: '@\w*'
          scope: storage.type.annotation.flow.coffee
  comment-line:
    - match: '#'
      scope: punctuation.definition.comment.coffee
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.number-sign.coffee
        - match: \n
          pop: true


  ### NEWLY ADDED CONTEXTS (MOSTLY COPIED FROM JS)


  property-access: # FROM JS
    - match: '\['
      scope: punctuation.section.brackets.begin.js
      push:
        - meta_scope: meta.brackets.js
        - match: '\]'
          scope: punctuation.section.brackets.end.js
          pop: true
        #- match: (?=\S)    # <-- FROM JS
        #  push: expression # <-- FROM JS
        - include: main # <-- ADDED

    - match: \.
      scope: punctuation.accessor.js
      push:
        - include: object-method
        - include: object-property

  object-method: # ADDED
    - match: '(?={{identifier}}\s*\()'
      set:
        - call-method-meta
        - function-call-arguments
        - call-path
        - object-property

    - match: (?={{identifier}}\s+(?!{{operator_keyword}}|{{keyword}})(?:{{identifier_start}}|/|'|"|`|!(?!=)|@|--\s*\S|\+\+\s*\S|(-|\+)\S|\d|=>|\[|\{|\())
      set:
        - call-method-implicit-meta
        - function-call-implicit-arguments
        - call-function-name

  call-method-meta: # FROM JS
    - meta_scope: meta.function-call.method.js #white
    #- include: else-pop # <-- FROM JS
    - include: immediately-pop # ADDED

  function-call-arguments: # FROM JS
    - meta_scope: function-call-arguments
    - match: \(
      scope: punctuation.section.group.begin.js #white
      set:
        - meta_scope: meta.group.js #white
        - match: \)
          scope: punctuation.section.group.end.js #white
          pop: true
        #- include: expression-list # <-- FROM JS
        - include: main # ADDED

  call-path: # VERBATIM FROM JS
    - match: \.
      scope: punctuation.accessor.js #white
      push: object-property
    - include: else-pop

  object-property: # FROM JS
    - meta_scope: object-property
    # - match: |-
    #     (?x)(?=
    #       {{identifier}}
    #       \s* = \s*
    #       {{either_func_lookahead}}
    #     )
    #   set:
    #     - function-initializer
    #     - function-name-meta
    #     - object-property-base

    - include: support-property

    - match: '(?={{identifier}}\s*\()'
      set: call-method-name

    - match: (?={{identifier}}\s+(?!{{operator_keyword}}|{{keyword}})(?:{{identifier_start}}|/|'|"|`|!(?!=)|@|--\s*\S|\+\+\s*\S|(-|\+)\S|\d|=>|\[|\{|\())
      set: call-method-name

    #- match: '(?={{identifier}}\s*(?!{{operator_keyword}}|{{keyword}})){{identifier}}'
    #  set: call-method-name

    - include: object-property-base
    - include: else-pop

  call-method-name: # VERBATIM FROM JS
    - include: support-property
    - match: '{{identifier}}'
      scope: variable.function.js #white
      pop: true
    - include: else-pop

  object-property-base: # VERBATIM FROM JS
    - match: '{{dollar_only_identifier}}'
      scope: meta.property.object.dollar.only.js punctuation.dollar.js #white
      pop: true
    - match: '{{dollar_identifier}}'
      scope: meta.property.object.dollar.js #white
      captures:
        1: punctuation.dollar.js #white
      pop: true
    - match: '{{identifier}}'
      scope: meta.property.object.js #white
      pop: true
    - match: '{{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.illegal-identifier.js #white
      pop: true

  support-property: # VERBATIM FROM JS
    - include: support-property-ecma

  support-property-ecma: # VERBATIM FROM JS
    - match: constructor{{identifier_break}}
      scope: variable.language.constructor.js #white
      pop: true
    - match: prototype{{identifier_break}}
      scope: support.constant.prototype.js #white
      pop: true

    - match: (?:hasOwnProperty|isPrototypeOf|propertyIsEnumerable|toLocaleString|toString|valueOf){{identifier_break}}
      scope: support.function.js #white
      pop: true

    # Annex B
    - match: __proto__{{identifier_break}}
      scope: invalid.deprecated.js variable.language.prototype.js #white
      pop: true
    - match: (?:__defineGetter__|__defineSetter__|__lookupGetter__){{identifier_break}}
      scope: invalid.deprecated.js support.function.js #white

  literal-call: # FROM JS
    - match: (?={{identifier}}\s*\()
      set:
        - call-function-meta
        - function-call-arguments
        - call-function-name

    #- match: (?={{identifier}}\s*(?:\.\s*{{identifier}}\s*)+\()
    #  set:
    #    - call-method-meta
    #    - function-call-arguments
    #    - call-path
    #    - literal-variable

    - match: (?={{identifier}}\s+(?!{{operator_keyword}}|{{keyword}})(?:{{identifier_start}}|/|'|"|`|!(?!=)|@|--\s*\S|\+\+\s*\S|(-|\+)\S|\d|=>|\[|\{|\())
      push:
        - match: (?={{identifier}})
          set:
            - call-function-implicit-meta
            - function-call-implicit-arguments
            - call-function-name

  call-function-meta: # FROM JS
    - meta_scope: meta.function-call.js
    #- include: else-pop # <-- FROM JS
    - include: immediately-pop # ADDED

  call-function-name: # VERBATIM FROM JS
    - match: '{{dollar_only_identifier}}'
      scope: variable.function.js variable.other.dollar.only.js punctuation.dollar.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.function.js
      pop: true
    - include: else-pop


  ### ADDED CONTEXTS


  call-method-implicit-meta:
    - meta_scope: meta.function-call.method.implicit.js #white
    #- include: else-pop # <-- FROM JS
    - include: immediately-pop # ADDED

  call-function-implicit-meta:
    - meta_scope: meta.function-call.js.implicit.coffee #bright.red-orange style.italic
    #- include: else-pop # <-- FROM JS
    - include: immediately-pop # ADDED

  function-call-implicit-arguments:
    - match: ' +'
      set:
        - meta_scope: function-call-implicit-arguments bright.red-orange
        - match: (?=\s*(#|}|$|{{keyword}}\s))
          pop: true
        #- include: expression-list # <-- FROM JS
        - include: main # ADDED


  ### UTILITY CONTEXTS + REGEXP FSR


  regexp:
    - meta_include_prototype: false
    - meta_scope: string.regexp.js
    - match: "/"
      scope: punctuation.definition.string.end.js
      set:
        - meta_include_prototype: false
        - meta_content_scope: string.regexp.js
        - match: '[gimyus]'
          scope: keyword.other.js
        - match: '[A-Za-z0-9]' # Ignore unknown flags for future-compatibility
        - include: immediately-pop
    - match: '(?=.|\n)'
      push:
        - meta_include_prototype: false
        - match: '(?=/)'
          pop: true
        - include: scope:source.regexp.js
  eol-pop:
    - match: (?=$)
      pop: true
  else-pop: # VERBATIM FROM JS
    - match: (?=\S)
      pop: true
  immediately-pop: # VERBATIM FROM JS
    - match: ''
      pop: true
