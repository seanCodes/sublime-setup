%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: JSON (JavaScriptES)
file_extensions: [json, sublime-settings, sublime-menu, sublime-keymap, sublime-mousemap,
  sublime-theme, sublime-build, sublime-project, sublime-completions]
scope: source.json.es
#foldingStartMarker: >-
#  (?x)       # turn on extended mode
#    ^        # a line beginning with
#    \s*      # some optional space
#    [{\[]    # the start of an object or array
#    (?!      # but not followed by
#      .*     # whatever
#      [}\]]  # and the close of an object or array
#      ,?     # an optional comma
#      \s*    # some optional space
#      $      # at the end of the line
#    )
#    |        # ...or...
#    [{\[]    # the start of an object or array
#    \s*      # some optional space
#    $        # at the end of the line
#foldingStopMarker: >-
#  (?x)     # turn on extended mode
#    ^      # a line beginning with
#    \s*    # some optional space
#    [}\]]  # and the close of an object or array

contexts:

  main:

    - include: value

  array:

    - match: \[
      captures:
        0: punctuation.definition.array.begin.json

      push:
        - meta_scope: meta.structure.array.json
        - match: \]
          captures:
            0: punctuation.definition.array.end.json
          pop: true

        - include: value

        - scope: punctuation.separator.array.json
          match: ','

        - scope: invalid.illegal.expected-array-separator.json
          match: '[^\s\]]'

  comments:

    #patterns:

    - match: /\*\*
      captures:
        0: punctuation.definition.comment.json
      push:
        - meta_scope: comment.block.documentation.json
        - match: \*/
          captures:
            0: punctuation.definition.comment.json
          pop: true

    - match: /\*
      captures:
        0: punctuation.definition.comment.json
      push:
        - meta_scope: comment.block.json
        - match: \*/
          captures:
            0: punctuation.definition.comment.json
          pop: true

    - scope: comment.line.double-slash.js
      match: (//).*$\n?
      captures:
        1: punctuation.definition.comment.json

  constant:
    - scope: constant.language.json
      match: \b(?:true|false|null)\b

  # handles integer and decimal numbers
  number:
    - scope: constant.numeric.json
      match: |-
        (?x)      # turn on extended mode
        -?        # an optional minus
        (?:
          0       # a zero
          |       # ...or...
          [1-9]   # a 1-9 character
          \d*     # followed by zero or more digits
        )
        (?:
          (?:
            \.    # a period
            \d+   # followed by one or more digits
          )?
          (?:
            [eE]  # an e character
            [+-]? # followed by an option +/-
            \d+   # followed by one or more digits
          )?      # make exponent optional
        )?        # make decimal portion optional

  # a JSON object
  object:

    - match: \{
      captures:
        0: punctuation.definition.dictionary.begin.json

      push:
        - meta_scope: meta.structure.dictionary.json
        - match: \}
          captures:
            0: punctuation.definition.dictionary.end.json
          pop: true

      # the JSON object key

        - include: string
        - include: comments

        - match: ':'
          captures:
            0: punctuation.separator.dictionary.key-value.json

          push:
            - meta_scope: meta.structure.dictionary.value.json
            - match: (,)|(?=\})
              captures:
                1: punctuation.separator.dictionary.pair.json
              pop: true

          # the JSON object value

            - include: value

            - scope: invalid.illegal.expected-dictionary-separator.json
              match: '[^\s,]'

        - scope: invalid.illegal.expected-dictionary-separator.json
          match: '[^\s\}]'

  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.json
      push:
        - meta_scope: string.quoted.double.json
        - match: '"'
          captures:
            0: punctuation.definition.string.end.json
          pop: true

        - scope: constant.character.escape.json
          match: |-
            (?x)              # turn on extended mode
            \\                # a literal backslash
            (?:               # ...followed by...
              ["\\/bfnrt]     # one of these characters
              |               # ...or...
              u               # a u
              [0-9a-fA-F]{4}) # and four hex digits

        - scope: invalid.illegal.unrecognized-string-escape.json
          match: \\.

  # the 'value' diagram at http://json.org
  value:

    #patterns:

    - include: constant
    - include: number
    - include: string
    - include: array
    - include: object
    - include: comments
