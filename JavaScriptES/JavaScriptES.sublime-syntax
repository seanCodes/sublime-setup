%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: JavaScriptES
scope: source.js.es
fileTypes: [js, htc, jsx]
first_line_match: ^#!/.*\b(node|js)$\n?

contexts:
  main:
    - include: core

  core:
    - include: literal-function-labels
    - include: literal-arrow-function-labels
    - include: literal-labels

    - include: literal-keywords
    - include: literal-for
    - include: literal-switch

    - include: expression
    - include: literal-punctuation

  expression:
    - include: support
    - include: literal-function
    - include: literal-arrow-function
    - include: literal-prototype              # after literal-function, which includes some prototype strings

    - include: literal-regexp                 # before operators to avoid ambiguities
    - include: literal-number
    - include: literal-template-string
    - include: literal-string
    - include: literal-language-constant
    - include: literal-language-variable

    - include: literal-method
    - include: literal-module
    - include: literal-class

    - include: literal-constructor
    - include: literal-method-call
    - include: literal-function-call

    - include: comments
    - include: brackets

    - include: literal-operators
    - include: literal-variable

  round-brackets:
    - match: \(
      captures:
        0: meta.brace.round.js
      push:
        - meta_scope: meta.group.braces.round
        - match: \)
          captures:
            0: meta.brace.round.js
          pop: true

        - include: expression

  square-brackets:
    - match: \[
      captures:
        0: meta.brace.square.js
      push:
        - meta_scope: meta.group.braces.square
        - match: \]
          captures:
            0: meta.brace.square.js
          pop: true

        - include: expression

  curly-brackets:
    - match: \{
      captures:
        0: meta.brace.curly.js
      push:
        - meta_scope: meta.group.braces.curly
        - match: \}
          captures:
            0: meta.brace.curly.js
          pop: true

        - include: main

  brackets:
    - include: round-brackets
    - include: square-brackets
    - include: curly-brackets

  comments:
    - include: special-comments-conditional-compilation

    # Comment Doc
    - match: /\*\*(?!/)
      captures:
        0: punctuation.definition.comment.begin.js
      push:
        - meta_scope: comment.block.documentation.js
        - match: (\*/)(\n)?
          captures:
            1: punctuation.definition.comment.end.js
            2: meta.punctuation.definition.comment.end.after.js
          pop: true

        - include: special-comments-jsdoc

        - scope: punctuation.definition.comment
          match: ^(\s+)(\*)(?=\s)
          captures:
            1: meta.punctuation.definition.comment.edge.before.js
            2: punctuation.definition.comment.edge.js

        - match: ^(\s+)(?=\*/)
          captures:
            0: meta.punctuation.definition.comment.end.before.js

        - include: comments-markdown-code-block
        - include: comments-markdown-strong-emphasis
        - include: comments-markdown-strong
        - include: comments-markdown-emphasis
        - include: comments-markdown-code-span

    # Comment Block
    - match: /\*
      captures:
        0: punctuation.definition.comment.begin.js
      push:
        - meta_scope: comment.block.js
        - match: (\*/)(\n)?
          captures:
            1: punctuation.definition.comment.end.js
            2: meta.after.comment.block.js
          pop: true
      # Only highlight markdown in doc blocks for now.
      #- include: comments-markdown-code-block
      #- include: comments-markdown-strong-emphasis
      #- include: comments-markdown-strong
      #- include: comments-markdown-emphasis
      #- include: comments-markdown-code-span

    # Comment Block: HTML
    - scope: comment.block.html.js
      match: (<!--|-->)
      captures:
        0: punctuation.definition.comment.js

    # Comment Line
    - match: (//)
      captures:
        1: punctuation.definition.comment.js
      push:
        - meta_scope: comment.line.double-slash.js
        - match: \n|^
          captures:
            0: meta.after.comment.line.double-slash.js
          pop: true

        - include: comments-markdown-code-block
        - include: comments-markdown-strong-emphasis
        - include: comments-markdown-strong
        - include: comments-markdown-emphasis
        - include: comments-markdown-code-span

    # Shebang
    - scope: comment.line.shebang.js
      match: ^(#!).*$(\n)?
      captures:
        1: punctuation.definition.comment.js
        2: meta.after.comment.line.shebang.js

  special-comments-jsdoc:
    # Callbacks
    - scope: meta.jsdoc.tag.definition.callback # namepath
      match: ^(\s+)(\*)\s+((@)(callback))\s+((external:)?(\S+))\s*$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.callback.definition.jsdoc.js
        7: keyword.declaration.type.kind.external.jsdoc.js
        8: entity.name.type.callback.definition.jsdoc.js
    # Mixins
    - scope: meta.jsdoc.tag.definition.mixin # ?namepath
      match: ^(\s+)(\*)\s+((@)(mixin))(?:\s+((external:)?(\S+)))?$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.mixin.definition.jsdoc.js
        7: keyword.declaration.type.kind.external.jsdoc.js
        8: entity.name.type.mixin.definition.jsdoc.js
    # External Modules
    - scope: meta.jsdoc.tag.definition.namepath-only # namepath
      match: ^(\s+)(\*)\s+((@)(external|host))\s+(\S+)\s*$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.namepath.definition.jsdoc.js entity.name.type.namepath.definition.jsdoc.js
    # Classes
    - scope: meta.jsdoc.tag.definition.type-optional-and-namepath-optional # ?type ?namepath
      match: ^(\s+)(\*)\s+((@)(class|constructor))(?:\s+(({\(?)(\?|\!|\.{3})?(.*?)(\[\])?(\)?})(?=\s+(?:$|[\w\d]))))?(?:\s+((external:)?(\S+)))?
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.jsdoc.js
        7: punctuation.definition.type.jsdoc.js
        8: keyword.operator.type.jsdoc.js
        9: storage.type.namepath.jsdoc.js
        10: keyword.operator.type.jsdoc.js
        11: punctuation.definition.type.jsdoc.js
        12: meta.type.namepath.definition.jsdoc.js
        13: keyword.declaration.type.kind.external.jsdoc.js
        14: entity.name.type.namepath.definition.jsdoc.js
    # Typedefs
    - scope: meta.jsdoc.tag.definition.type-optional-and-namepath # ?type namepath
      match: ^(\s+)(\*)\s+((@)(typedef))(?:\s+(({\(?)(\?|\!|\.{3})?(.*?)(\[\])?(\)?})(?=\s+(?:$|[\w\d]))))?\s+((external:)?(\S+))
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.jsdoc.js
        7: punctuation.definition.type.jsdoc.js
        8: keyword.operator.type.jsdoc.js
        9: storage.type.namepath.jsdoc.js
        10: keyword.operator.type.jsdoc.js
        11: punctuation.definition.type.jsdoc.js
        12: meta.type.namepath.definition.jsdoc.js
        13: keyword.declaration.type.kind.external.jsdoc.js
        14: entity.name.type.namepath.definition.jsdoc.js
    # Event Definitions
    - scope: meta.jsdoc.tag.definition.event # ?classname eventname
      match: ^(\s+)(\*)\s+((@)(event))\s+(((external:)?([^\s#:]+?#))?((event:)?(\S+)))\s*$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.event.definition.jsdoc.js
        7: meta.type.namepath.jsdoc.js
        8: keyword.declaration.type.kind.external.jsdoc.js
        9: storage.type.namepath.jsdoc.js
        10: meta.type.event.name.definition.jsdoc.js
        11: keyword.declaration.type.kind.event.jsdoc.js
        12: entity.name.type.event.definition.jsdoc.js
    # Event Usages
    - scope: meta.jsdoc.tag.definition.event # ?classname eventname
      match: ^(\s+)(\*)\s+((@)(fires|emits|listens))\s+(((external:)?(module:)?([^\s#:]+?#))?((event:)?(\S+)))\s*$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.event.definition.jsdoc.js
        7: meta.type.namepath.jsdoc.js
        8: keyword.declaration.type.kind.external.jsdoc.js
        9: keyword.declaration.type.kind.module.jsdoc.js
        10: storage.type.namepath.jsdoc.js
        11: meta.type.event.name.jsdoc.js
        12: keyword.declaration.type.kind.event.jsdoc.js
        13: storage.type.event.jsdoc.js

    # Tags:  @tag
    - scope: meta.jsdoc.tag.tag-only
      match: ^(\s+)(\*)\s+((@)(abstract|async|generator|global|hideconstructor|ignore|inheritdoc|inner|instance|override|package|private|protected|public|readonly|virtual))\s*$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
    # Tags:  @tag  <namepath>
    - scope: meta.jsdoc.tag.namepath-only
      match: ^(\s+)(\*)\s+((@)(augments|extends|memberof\!?|mixes))\s+((external:)?(\S+))\s*$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.namepath.jsdoc.js
        7: keyword.declaration.type.kind.external.jsdoc.js
        8: storage.type.namepath.jsdoc.js
    # Tags:  @tag  <type>
    - scope: meta.jsdoc.tag.type-no-namepath
      match: ^(\s+)(\*)\s+((@)(type))\s+(({\(?)(\?|\!|\.{3})?(.*?)(\[\])?(\)?})(?=\s*$))$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.jsdoc.js
        7: punctuation.definition.type.jsdoc.js
        8: keyword.operator.type.jsdoc.js
        9: storage.type.namepath.jsdoc.js
        10: keyword.operator.type.jsdoc.js
        11: punctuation.definition.type.jsdoc.js
    # Tags:  @tag  [<type>]
    - scope: meta.jsdoc.tag.type-optional-no-namepath
      match: ^(\s+)(\*)\s+((@)(enum))(?:\s+(({\(?)(\?|\!|\.{3})?(.*?)(\[\])?(\)?})(?=\s*$)))?$
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.jsdoc.js
        7: punctuation.definition.type.jsdoc.js
        8: keyword.operator.type.jsdoc.js
        9: storage.type.namepath.jsdoc.js
        10: keyword.operator.type.jsdoc.js
        11: punctuation.definition.type.jsdoc.js
    # Tags:  OTHER
    - scope: meta.jsdoc.tag.generic
      match: >-
        (?x)
          ^(\s+)
          (\*)
          \s+
          (
            (@)
            (
              a(?:
                ccess|
                lias|
                rg(?:ument)?|
                uthor)|
              borrows|
              c(?:
                lassdesc|
                o(?:
                  nst(?:
                    ant|
                    ructs)?|
                pyright))|
              d(?:
                e(?:
                  fault(?:value)?|
                  precated|
                  sc(?:ription)?))|
              ex(?:
                ample|
                ception|
                ports)|
              f(?:
                ile(?:overview)?|
                unc(?:tion)?)|
              i(?:
                mplements|
                nterface)|
              kind|
              l(?:
                ends|
                i(?:
                  cense|
                  stens|
                  nk(?:code|plain)?))|
              m(?:
                ethod|
                odule)|
              name(?:space)?|
              overview|
              p(?:
                aram|
                rop(?:erty)?)|
              re(?:
                quires|
                turns?)|
              s(?:
                ee|
                ince|
                tatic|
                ummary)|
              t(?:
                h(?:
                  is|
                  rows)|
                odo|
                utorial)|
              v(?:
                ar(?:iation)?|
                ersion)|
              yields?
            )
          )
          (?:
            \s+(
              ({\(?)(\?|\!|\.{3})?(.*?)(\[\])?(\)?})(?=\s+(?:$|[\w\d\[({*>-]))
            )
          )?
      captures:
        1: meta.punctuation.definition.comment.edge.before.js
        2: punctuation.definition.comment.edge.js
        3: meta.tag.jsdoc.js
        4: punctuation.definition.tag.jsdoc.js
        5: entity.name.tag.jsdoc.js
        6: meta.type.jsdoc.js
        7: punctuation.definition.type.jsdoc.js
        8: keyword.operator.type.jsdoc.js
        9: meta.type.namepath.jsdoc.js storage.type.namepath.jsdoc.js
        10: keyword.operator.type.jsdoc.js
        11: punctuation.definition.type.jsdoc.js

  special-comments-conditional-compilation:
    - match: /\*(?=@)
      captures:
        0: punctuation.definition.comment.js
      push:
        - meta_scope: comment.block.conditional.js
        - match: \*/
          captures:
            1: keyword.control.conditional.js
            2: punctuation.definition.keyword.js
          pop: true

        - scope: punctuation.definition.comment.js
          match: /\*

        - include: main

    - scope: keyword.control.conditional.js
      match: (@)(if|elif|else|end|ifdef|endif|cc_on|set)\b
      captures:
        1: punctuation.definition.keyword.js

    - scope: variable.other.conditional.js
      match: (@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript|_jscript_build|_jscript_version|_debug|_fast|[a-zA-Z]\w+)
      captures:
        1: punctuation.definition.variable.js

  comments-markdown-strong-emphasis:
    # ***foo***
    - match: (\*\*\*\b(?!_)|(?<![a-zA-Z0-9])\*\*\*(?!\s))(?=.*?(?:\b(?<!_)\*\b(?!_)|\S\*(?![a-zA-Z0-9]))) #(\*\*\*)(?=[^\s*](\\\*|\s[\s*]+\s|[^*])*(?<!\s)\*\*\*)
      captures:
        1: punctuation.definition.markdown.strong-emphasis.begin.js
      push:
        - meta_scope: comment.markdown.strong-emphasis.js
        - match: (\b(?<!_)\*\*\*\b(?!_)|(?<!\s)\*\*\*(?![a-zA-Z0-9])) #(?<![\s\\*])(\*\*\*)
          captures:
            1: punctuation.definition.markdown.strong-emphasis.end.js
          pop: true

        - include: comments-markdown-code-span

    # ___foo___
    - match: ((?<![a-zA-Z0-9])___(?=[a-zA-Z0-9])|(?<![a-zA-Z0-9])___(?!\s))(?=.*?\S___(?![a-zA-Z0-9])) #\b(?<=[\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”])(___)(?=[^\s_](\\_|\s[\s_]+\s|[^_])*(?<!\s)___)
      captures:
        1: punctuation.definition.markdown.strong-emphasis.begin.js
      push:
        - meta_scope: comment.markdown.strong-emphasis.js
        - match: ((?<=[a-zA-Z0-9])___(?=[a-zA-Z0-9])|(?<=\S)___(?=[^a-zA-Z0-9])) #\n|(?<![\s\\_])(___)
          captures:
            1: punctuation.definition.markdown.strong-emphasis.end.js
          pop: true

        - include: comments-markdown-code-span

  comments-markdown-strong:
    # **foo**
    - match: (\*\*\b(?!_)|(?<![a-zA-Z0-9])\*\*(?!\s))(?=.*?(?:\b(?<!_)\*\*\b(?!_)|\S\*\*(?![a-zA-Z0-9]))) #(\*\*)(?=[^\s*](\\\*|\s[\s*]+\s|[^*])*(?<!\s)\*\*)
      captures:
        1: punctuation.definition.markdown.strong.begin.js
      push:
        - meta_scope: comment.markdown.strong.js
        - match: (\b(?<!_)\*\*\b(?!_)|(?<!\s)\*\*(?![a-zA-Z0-9])) #(?<![\s\\*])(\*\*)
          captures:
            1: punctuation.definition.markdown.strong.end.js
          pop: true

        - include: comments-markdown-code-span
        # - include: comments-markdown-emphasis

    # __foo__
    - match: ((?<!\w)__(?=[a-zA-Z0-9])|(?<!\w)__(?![\s_]))(?=.*?\S__(?!\w)) #\b(?<=[\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”])(__)(?=[^\s_](\\_|\s[\s_]+\s|[^_])*(?<!\s)__)
      captures:
        1: punctuation.definition.markdown.strong.begin.js
      push:
        - meta_scope: comment.markdown.strong.js
        - match: ((?<=[a-zA-Z0-9])__(?=[a-zA-Z0-9])|(?<=\S)__(?=[^a-zA-Z0-9])) #\n|(?<![\s\\_])(__)
          captures:
            1: punctuation.definition.markdown.strong.end.js
          pop: true

        - include: comments-markdown-code-span
        # - include: comments-markdown-emphasis

  comments-markdown-emphasis:
    # Reviewed these May 9 2018 and they can probably all be deleted.
    #(?:\*(?=[a-zA-Z0-9])|(?<=[^a-zA-Z0-9])\*(?=\S)|^\*(?=\S))(?:.\r?\n?)*?(?:(?:[a-zA-Z0-9]\*(?=[a-zA-Z0-9])|\S\*(?=[^a-zA-Z0-9])))
    #(\*(?=[a-zA-Z0-9])|(?<=[^a-zA-Z0-9])\*(?=\S)|^\*(?=\S))(?:.\r?\n?)*?(?:[a-zA-Z0-9](\1)(?=[a-zA-Z0-9])|\S(\1)(?=$|[^a-zA-Z0-9]))
    #(\*(?=[a-zA-Z0-9])|(?<=[^a-zA-Z0-9])\*(?=[^\s*])|^\*(?=[^\s*]))(?:.\r?\n?)*?(?:[a-zA-Z0-9](\1)(?=[a-zA-Z0-9])|[^\s*](\1)(?=$|[^a-zA-Z0-9*]))
    #((?<!\*)\*(?=[a-zA-Z0-9])|(?<![a-zA-Z0-9*])\*(?![\s*]))(?:.\r?\n?)*?(?:[a-zA-Z0-9](\1)(?=[a-zA-Z0-9])|[^\s*](\1)(?![a-zA-Z0-9*]))
    #((?<!\*)\*\b(?!_)|(?<![a-zA-Z0-9*])\*(?![\s*]))(?:.\r?\n?)*?(?:\b(?<!_)(\1)\b(?!_)|[^\s*](\1)(?![a-zA-Z0-9*]))
    #((?<!\*)\*\b(?!_)|(?<![a-zA-Z0-9*])\*(?![\s*]))(?=.*?(?:\b(?<!_)\*\b(?!_)|[^\s*]\*(?![a-zA-Z0-9*])))

    # *foo*
    - match: ((?<!\*)\*\b(?!_)|(?<![a-zA-Z0-9*])\*(?![\s*]))(?=.*?(?:\b(?<!_)\*\b(?!_)|[^\s*]\*(?![a-zA-Z0-9*]))) #(\*)(?=[^\s*](\\\*|\s[\s*]+\s|[^*])*(?<!\s)\*)
      #match: (\*(?=[a-zA-Z0-9])|(?<=[^a-zA-Z0-9])\*(?=\S)|^\*(?=\S))(?=.*(?:[a-zA-Z0-9]\*(?=[a-zA-Z0-9])|\S\*(?=[^a-zA-Z0-9])))
      #match: (\*(?=[a-zA-Z0-9])|(?<=[^a-zA-Z0-9])\*(?=\S)|^\*(?=\S)).*(?:[a-zA-Z0-9](\*)(?=[a-zA-Z0-9])|\S(\*)(?=[^a-zA-Z0-9]))
      #match: (\*(?![\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”])|(?<=[\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”])\*(?!\s)).*(?:[^\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”](\*)(?![!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”])|\S(\*)(?=[\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”]))
      #captures:
      #  1: name: punctuation.definition.markdown.emphasis.begin.js
      #  2: name: punctuation.definition.markdown.emphasis.end.js
      #  3: name: punctuation.definition.markdown.emphasis.end.js
      captures:
        1: punctuation.definition.markdown.emphasis.begin.js
      push:
        - meta_scope: comment.markdown.emphasis.js
        - match: (\b(?<!_)\*\b(?!_)|(?<![\s*])\*(?![a-zA-Z0-9*])) #\n|(?<![\s\\*])(\*)
          captures:
            1: punctuation.definition.markdown.emphasis.end.js
          pop: true

        - include: comments-markdown-code-span

    # _foo_
    - match: ((?<!\w)_(?=[a-zA-Z0-9])|(?<!\w)_(?![\s_]))(?=.*?[^\s_]_(?!\w)) #\b(?<=[\s!"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~‘’“”])(_(?!\s))(?=(\\_|\s[\s_]+\s|[^_])*[^\s_]_)
      captures:
        1: punctuation.definition.markdown.emphasis.begin.js
      push:
        - meta_scope: comment.markdown.emphasis.js
        - match: (?<![\s_])(_)(?!\w) #\n|(?<![\s\\_])(_)
          captures:
            1: punctuation.definition.markdown.emphasis.end.js
          pop: true

        - include: comments-markdown-code-span

  comments-markdown-code-span:
    - scope: comment.markdown.code.js
      match: (`)(?!\s)(\\`|[^`])*?\S(`)(?![a-zA-Z0-9])
      captures:
        1: punctuation.definition.markdown.code.begin.js
        3: punctuation.definition.markdown.code.end.js

  comments-markdown-code-block:
    # ```
    # foo
    # ```
    - match: (\s*)(````*)([^`\s]*)(\s*)
      captures:
        1: meta.punctuation.definition.markdown.code.block.begin.before.js
        2: punctuation.definition.markdown.code.block.begin.js
        3: comment.markdown.code.block.syntax.js
        4: meta.punctuation.definition.markdown.code.block.begin.after.js
      push:
        - meta_scope: comment.markdown.code.block.js
        - match: (\s*)(\2`*)(\s*)
          captures:
            1: meta.punctuation.definition.markdown.code.block.end.before.js
            2: punctuation.definition.markdown.code.block.end.js
            3: meta.punctuation.definition.markdown.code.block.end.after.js
          pop: true

        - match: ^(\s*)(\*|//)(?=\s)
          captures:
            1: meta.punctuation.definition.comment.edge.before.js
            2: punctuation.definition.comment.edge.js

        - match: ^(\s*)(//)(\s+(?!```))?
          captures:
            1: meta.punctuation.definition.comment.before.js
            2: punctuation.definition.comment.js
            3: meta.punctuation.definition.comment.after.js

    # ~~~
    # foo
    # ~~~
    - match: (\s*)(~~~~*)([^~\s]*)(\s*)
      captures:
        1: meta.punctuation.definition.markdown.code.block.begin.before.js
        2: punctuation.definition.markdown.code.block.begin.js
        3: comment.markdown.code.block.syntax.js
        4: meta.punctuation.definition.markdown.code.block.begin.after.js
      push:
        - meta_scope: comment.markdown.code.block.js
        - match: (\s*)(\2~*)(\s*)
          captures:
            1: meta.punctuation.definition.markdown.code.block.end.before.js
            2: punctuation.definition.markdown.code.block.end.js
            3: meta.punctuation.definition.markdown.code.block.end.after.js
          pop: true

        - match: ^(\s*)(\*|//)(?=\s)
          captures:
            1: meta.punctuation.definition.comment.edge.before.js
            2: punctuation.definition.comment.edge.js

        - match: ^(\s*)(//)(\s+(?!~~~))?
          captures:
            1: meta.punctuation.definition.comment.before.js
            2: punctuation.definition.comment.js
            3: meta.punctuation.definition.comment.after.js

  function-declaration-parameters:
    - match: \(
      captures:
        0: punctuation.definition.parameters.begin.js
      push:
        - meta_scope: meta.function.declaration.parameters.js
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.js
          pop: true

        - scope: meta.spread.js
          match: (?<!\.)(\.\.\.)([_$a-zA-Z][$\w]*)?
          captures:
            1: keyword.operator.spread.js
            2: variable.other.readwrite.js

        - scope: variable.parameter.function.js
          match: '[_$a-zA-Z][$\w]*'

        - scope: punctuation.separator.parameter.function.js
          match: ','

        - match: '='
          captures:
            0: keyword.operator.assignment.js
          push:
            - meta_scope: meta.parameter.optional.js
            - match: '(?=[,)])'
              pop: true

            #- include: literal-method-call
            - include: expression

        - include: comments

  method-declaration-parameters:
    - match: \(
      captures:
        0: punctuation.definition.parameters.begin.js
      push:
        - meta_scope: meta.method.declaration.parameters.js

        - match: \)
          captures:
            0: punctuation.definition.parameters.end.js
          pop: true

        - scope: meta.spread.js
          match: (?<!\.)(\.\.\.)([_$a-zA-Z][$\w]*)?
          captures:
            1: keyword.operator.spread.js
            2: variable.other.readwrite.js

        - scope: variable.parameter.function.js
          match: '[_$a-zA-Z][$\w]*'

        - scope: punctuation.separator.parameter.function.js
          match: ','

        - match: '='
          captures:
            0: keyword.operator.assignment.js
          push:
            - meta_scope: meta.parameter.optional.js
            - match: '(?=[,)])'
              pop: true

            #- include: literal-method-call
            - include: expression

        - include: comments

  literal-module:
    - scope: keyword.operator.module.js
      match: (?<!\.)\b(import|export|default|from|as)\b

  literal-class:
    # e.g. class MyClass {  }
    - match: >-
        (?x)
          (?<!\.)\b(class)
          \s+((?!\b(extends)\b)[_$a-zA-Z][$\w]*)?
      captures:
        1: storage.type.class.js
        2: entity.name.class.js
      push:
        - meta_scope: meta.class.js
        - match: '}'
          captures:
            0: meta.brace.curly.js
          pop: true

        - match: \b(extends)\b
          captures:
            1: storage.type.extends.js
          push:
            - meta_scope: meta.class.extends.js
            - match: '(?={)'
              pop: true

            - include: expression

        - match: '{'
          captures:
            0: meta.brace.curly.js
          push:
            - match: '(?=})'
              pop: true

            - include: brackets
            - include: comments
            - include: literal-method
            - include: literal-property-initializer
            - include: expression

  literal-method:
    # e.g. play(arg1, arg2) {  }
    - match: >-
        (?x)
          (?:\b(static)\s+)?
          (?:\b(async)\s+)?
          #(?:(\*)\s*)?([_$a-zA-Z][$\w]*)\s* # BEFORE
          (?:(\*)\s*)? # AFTER
          # Poor man’s dynamic property (e.g. `{ [foo]: … }`) handling:
          (?:
            ([_$a-zA-Z][$\w]*)|
            ((\[)([_$a-zA-Z][$\w]*)(\]))
          )\s* # AFTER
          #(?=\(.*\)(?:\s|/\*.*\*/)*\{)
          (?=\([^())]*\)(?:\s|/\*.*\*/)*\{)
      captures:
        1: storage.type.js
        2: storage.type.js
        3: keyword.generator.asterisk.js
        4: entity.name.method.js
        5: meta.group.braces.square
        6: meta.brace.square.js
        7: variable.other.readwrite.js
        8: meta.brace.square.js
      push:
        - meta_scope: meta.method.js
        - match: (?<=\))
          pop: true

        - include: method-declaration-parameters

    # getter/setter
    - match: >-
        (?x)
          \b(?:(static)\s+)?
          (get|set)\s+
          ([_$a-zA-Z][$\w]*)\s*
          (?=\([^())]*\)(?:\s|/\*.*\*/)*\{)
      captures:
        1: storage.type.js
        2: storage.type.accessor.js
        3: entity.name.accessor.js
      push:
        - meta_scope: meta.accessor.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

  literal-property-initializer:
    - scope: meta.class.property.js
      match: \b(?:(static)\s+)?([_$a-zA-Z][$\w]*)\s*=
      captures:
        1: storage.type.js
        2: variable.class.property.js

  literal-prototype:
    # e.g. Sound.prototype
    - scope: meta.prototype.access.js
      match: ([_$a-zA-Z][$\w]*)(\.)(prototype)\b
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: variable.language.prototype.js

    # e.g. Sound.prototype = {  } when extending an object
    - scope: meta.prototype.declaration.js
      match: ([_$a-zA-Z][$\w]*)(\.)(prototype)\s*=\s*
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: variable.language.prototype.js

  literal-function:
    # e.g. function play(arg1, arg2) {  }
    - match: >-
        (?x)
          (?:\b(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      captures:
        1: storage.type.js
        2: storage.type.function.js
        3: keyword.generator.asterisk.js
        4: entity.name.function.js
      push:
        - meta_scope: meta.function.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

    # e.g. play = function(arg1, arg2) {  }
    - match: >-
        (?x)
          (\b[_$a-zA-Z][$\w]*)
          \s*=
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      captures:
        1: entity.name.function.js
        2: storage.type.js
        3: storage.type.function.js
        4: keyword.generator.asterisk.js
        5: entity.name.function.js
      push:
        - meta_scope: meta.function.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

    # e.g. Sound.prototype.play = function(arg1, arg2) {  }
    - match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)(prototype)
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: variable.language.prototype.js
        4: keyword.operator.accessor.js
        5: entity.name.function.js
        6: storage.type.js
        7: storage.type.function.js
        8: keyword.generator.asterisk.js
        9: entity.name.function.js
      push:
        - meta_scope: meta.prototype.function.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

    # e.g. Sound.play = function(arg1, arg2) {  }
    - match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: entity.name.function.js
        4: storage.type.js
        5: storage.type.function.js
        6: keyword.generator.asterisk.js
        7: entity.name.function.js
      push:
        - meta_scope: meta.function.static.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

  literal-function-labels:
    # e.g. play: function(arg1, arg2) {  }
    - match: >-
        (?x)
          \b([_$a-zA-Z][$\w]*)
          \s*(:)
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      captures:
        1: entity.name.function.js
        2: punctuation.separator.key-value.js
        3: storage.type.js
        4: storage.type.function.js
        5: keyword.generator.asterisk.js
        6: entity.name.function.js
      push:
        - meta_scope: meta.function.json.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

    # e.g. "play": function(arg1, arg2) {  }
    - match: >-
        (?x)
          (?:
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))
          )
          \s*(:)
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      captures:
        1: string.quoted.single.js
        2: punctuation.definition.string.begin.js
        3: entity.name.function.js
        4: punctuation.definition.string.end.js
        5: string.quoted.double.js
        6: punctuation.definition.string.begin.js
        7: entity.name.function.js
        8: punctuation.definition.string.end.js
        9: punctuation.separator.key-value.js
        10: storage.type.js
        11: storage.type.function.js
        12: keyword.generator.asterisk.js
        13: entity.name.function.js
      push:
        - meta_scope: meta.function.json.js
        - match: (?<=\))
          pop: true

        - include: function-declaration-parameters

  literal-arrow-function:
    # e.g. (args) => { }
    - match: >-
        (?x)
          (\basync)?\s*
          (?=\([^()]*\)\s*(=>))
      captures:
        1: storage.type.js
      push:
        - meta_scope: meta.function.arrow.js
        - match: (?<=\))\s*(=>)
          captures:
            1: storage.type.function.arrow.js
          pop: true

        - include: function-declaration-parameters

    # e.g. arg => { }
    - scope: meta.function.arrow.js
      match: >-
        (?x)
          (\basync)?\s*
          \b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        1: storage.type.js
        2: variable.parameter.function.js
        3: storage.type.function.arrow.js

    # e.g. play = (args) => { }
    - match: >-
        (?x)
          (\b[_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      captures:
        1: entity.name.function.js
        2: storage.type.js
      push:
        - meta_scope: meta.function.arrow.js
        - match: (?<=\))\s*(=>)
          captures:
            1: storage.type.function.arrow.js
          pop: true

        - include: function-declaration-parameters

    # e.g. play = arg => { }
    - scope: meta.function.arrow.js
      match: >-
        (?x)
          (\b[_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        1: entity.name.function.js
        2: storage.type.js
        3: variable.parameter.function.js
        4: storage.type.function.arrow.js

    # e.g. Sound.prototype.play = (args) => { }
    - match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)(prototype)
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: variable.language.prototype.js
        4: keyword.operator.accessor.js
        5: entity.name.function.js
        6: storage.type.js
      push:
        - meta_scope: meta.prototype.function.arrow.js
        - match: (?<=\))\s*(=>)
          captures:
            1: storage.type.function.arrow.js
          pop: true

        - include: function-declaration-parameters

    # e.g. Sound.prototype.play = arg => { }
    - scope: meta.prototype.function.arrow.js
      match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)(prototype)
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: variable.language.prototype.js
        4: keyword.operator.accessor.js
        5: entity.name.function.js
        6: storage.type.js
        7: variable.parameter.function.js
        8: storage.type.function.arrow.js

    # e.g. Sound.play = (args) => { }
    - match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: entity.name.function.js
        4: storage.type.js
      push:
        - meta_scope: meta.function.static.arrow.js
        - match: (?<=\))\s*(=>)
          captures:
            1: storage.type.function.arrow.js
          pop: true

        - include: function-declaration-parameters

    # e.g. Sound.play = arg => { }
    - scope: meta.function.static.arrow.js
      match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        1: entity.name.class.js
        2: keyword.operator.accessor.js
        3: entity.name.function.js
        4: storage.type.js
        5: variable.parameter.function.js
        6: storage.type.function.arrow.js

  literal-arrow-function-labels:
    # e.g. play: (args) => { }
    - match: >-
        (?x)
          \b([_$a-zA-Z][$\w]*)
          \s*(:)
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      captures:
        1: entity.name.function.js
        2: punctuation.separator.key-value.js
        3: storage.type.js
      push:
        - meta_scope: meta.function.json.arrow.js
        - match: (?<=\))\s*(=>)
          captures:
            1: storage.type.function.arrow.js
          pop: true

        - include: function-declaration-parameters

    # e.g. play: arg => { }
    - scope: meta.function.json.arrow.js
      match: >-
        (?x)
          \b([_$a-zA-Z][$\w]*)
          \s*(:)
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        1: entity.name.function.js
        2: punctuation.separator.key-value.js
        3: storage.type.js
        4: variable.parameter.function.js
        5: storage.type.function.arrow.js

    # e.g. "play": (args) => { }
    - match: >-
        (?x)
          (?:
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))
          )
          \s*(:)
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      captures:
        1: string.quoted.single.js
        2: punctuation.definition.string.begin.js
        3: entity.name.function.js
        4: punctuation.definition.string.end.js
        5: string.quoted.double.js
        6: punctuation.definition.string.begin.js
        7: entity.name.function.js
        8: punctuation.definition.string.end.js
        9: punctuation.separator.key-value.js
        10: storage.type.js
      push:
        - meta_scope: meta.function.json.arrow.js
        - match: (?<=\))\s*(=>)
          captures:
            1: storage.type.function.arrow.js
          pop: true

        - include: function-declaration-parameters

    # e.g. "play": arg => { }
    - scope: meta.function.json.arrow.js
      match: >-
        (?x)
          (?:
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))
          )
          \s*(:)
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        1: string.quoted.single.js
        2: punctuation.definition.string.begin.js
        3: entity.name.function.js
        4: punctuation.definition.string.end.js
        5: string.quoted.double.js
        6: punctuation.definition.string.begin.js
        7: entity.name.function.js
        8: punctuation.definition.string.end.js
        9: punctuation.separator.key-value.js
        10: storage.type.js
        11: variable.parameter.function.js
        12: storage.type.function.arrow.js

  literal-function-call:
    - scope: meta.function-call.without-arguments.js
      match: >-
        (?x)
          ([_$a-zA-Z][$\w]*)\s*
          (\(\s*\))
      captures:
        1: variable.function.js
        2: meta.group.braces.round.function.arguments.js

    - scope: meta.function-call.with-arguments.js
      match: >-
        (?x)
          ([_$a-zA-Z][$\w]*)\s*
          (?=\()
      captures:
        1: variable.function.js

  literal-method-call:
    - scope: meta.function-call.static.without-arguments.js
      match: >-
        (?x)
          (?:(?<=\.)|\b)
          ([A-Z][$\w]*)\s*(\.)
          ([_$a-zA-Z][$\w]*)\s*
          (\(\s*\))
      captures:
        1: variable.other.class.js
        2: keyword.operator.accessor.js
        3: variable.function.js
        4: meta.group.braces.round.function.arguments.js

    - scope: meta.function-call.static.with-arguments.js
      match: >-
        (?x)
          (?:(?<=\.)|\b)
          ([A-Z][$\w]*)\s*(\.)
          ([_$a-zA-Z][$\w]*)\s*
          (?=\()
      captures:
        1: variable.other.class.js
        2: keyword.operator.accessor.js
        3: variable.function.js

    - scope: meta.function-call.method.without-arguments.js
      match: >-
        (?x)
          (?<=\.)
          ([_$a-zA-Z][$\w]*)\s*
          (\(\s*\))
      captures:
        1: variable.function.js
        2: meta.group.braces.round.function.arguments.js

    - scope: meta.function-call.method.with-arguments.js
      match: >-
        (?x)
          (?<=\.)
          ([_$a-zA-Z][$\w]*)\s*
          (?=\()
      captures:
        1: variable.function.js

  literal-language-variable:
    - scope: variable.language.arguments.js
      match: (?<!(?<!\.\.)\.)\b(arguments)\b

    - scope: variable.language.super.js
      match: (?<!(?<!\.\.)\.)\b(super)\b

    - scope: variable.language.this.js
      match: (?<!(?<!\.\.)\.)\b(this)\b

    - scope: variable.language.self.js
      match: (?<!(?<!\.\.)\.)\b(self)\b

    - scope: variable.language.proto.js
      match: (?<=\.)\b(__proto__)\b

    - scope: variable.language.constructor.js
      match: (?<=\.)\b(constructor)\b

    - scope: variable.language.prototype.js
      match: (?<=\.)\b(prototype)\b

  literal-language-constant:
    - scope: constant.language.boolean.true.js
      match: (?<!\.)\btrue\b

    - scope: constant.language.boolean.false.js
      match: (?<!\.)\bfalse\b

    - scope: constant.language.null.js
      match: (?<!\.)\bnull\b

    - scope: constant.language.undefined.js
      match: (?<!\.)\bundefined\b

    - scope: constant.language.nan.js
      match: (?<!\.)\bNaN\b

  literal-constructor:
    - match: (new)\s+(?=[_$a-zA-Z][$\w.]*)
      captures:
        1: keyword.operator.new.js
      push:
        - meta_scope: meta.instance.constructor
        - match: (?![_$a-zA-Z.])
          pop: true

        - include: support
        - include: literal-language-variable

        - scope: keyword.operator.accessor.js
          match: \.

        - scope: variable.type.new.js
          match: (?<=\s)[_$a-zA-Z][$\w]*(?=\s*\()

        - scope: meta.property.object.js
          match: (?<=\.)\s*[_$a-zA-Z][$\w]*
          captures:
            2: variable.other.property.js

  literal-keyword-storage:
    - scope: storage.type.js
      match: (?<!\.)\b(const|let|var)\b

  literal-keywords:
    - include: literal-keyword-storage

    - match: (?<!\.)\b(yield)\b(?:\s*(\*))?
      captures:
        1: keyword.control.flow.js
        2: keyword.generator.asterisk.js

    - match: (?<!\.)\b(return)\b
      captures:
        1: keyword.control.flow.js
      push:
        - meta_scope: meta.return.js
        - match: \n|^
          pop: true

        - include: core

    - scope: keyword.control.flow.js
      match: (?<!\.)\bawait\b

    - scope: keyword.control.conditional.js
      match: (?<!\.)\b(if|else)\b

    - scope: keyword.control.trycatch.js
      match: (?<!\.)\b(catch|finally|throw|try)\b

    - scope: keyword.control.loop.js
      match: (?<!\.)\b(break|continue|do|goto|while)\b

  literal-for:
    - match: (?<!\.)\b(for)\b
      captures:
        1: keyword.control.loop.js
      push:
        - meta_scope: meta.for.js
        - match: \)
          captures:
            0: meta.brace.round.js
          pop: true

        - match: \(
          captures:
            0: meta.brace.round.js
          push:
            - match: (?=\))
              pop: true

            - include: literal-keyword-storage
            - include: expression
            - include: literal-punctuation

  literal-switch:
    - match: (?<!\.)\b(switch)\b
      captures:
        1: keyword.control.switch.js
      push:
        - meta_scope: meta.switch.js
        - match: \}
          captures:
            0: meta.brace.curly.js
          pop: true

        - include: round-brackets

        - match: \{
          captures:
            0: meta.brace.curly.js
          push:
            - match: (?=})
              pop: true

            - match: (?<!\.)\b(case|default)\b
              captures:
                1: keyword.control.switch.js
              push:
                - match: (?=:)
                  pop: true

                - include: expression

            - include: main

  literal-operators:
    - scope: keyword.operator.js
      match: (?<!\.)\b(delete|in|instanceof|new|of|typeof|void|with)\b

    - scope: keyword.operator.logical.js
      match: >-
        (?x)
          !(?!=)| # logical-not     right-to-left   right
          &&    | # logical-and     left-to-right   both
          \|\|  | # logical-or      left-to-right   both

    - scope: keyword.operator.assignment.js
      match: >-
        (?x)
          =(?!=)| # assignment      right-to-left   both

    - scope: keyword.operator.assignment.augmented.js
      match: >-
        (?x)
          %=   | # assignment      right-to-left   both
          &=   | # assignment      right-to-left   both
          \*=  | # assignment      right-to-left   both
          \+=  | # assignment      right-to-left   both
          -=   | # assignment      right-to-left   both
          /=   | # assignment      right-to-left   both
          \^=  | # assignment      right-to-left   both
          \|=  | # assignment      right-to-left   both
          <<=  | # assignment      right-to-left   both
          >>=  | # assignment      right-to-left   both
          >>>= | # assignment      right-to-left   both

    - scope: keyword.operator.bitwise.js
      match: >-
        (?x)
          ~    | # bitwise-not     right-to-left   right
          <<   | # bitwise-shift   left-to-right   both
          >>>  | # bitwise-shift   left-to-right   both
          >>   | # bitwise-shift   left-to-right   both
          &    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both

    - scope: keyword.operator.relational.js
      match: >-
        (?x)
          <=   | # relational      left-to-right   both
          >=   | # relational      left-to-right   both
          <    | # relational      left-to-right   both
          >      # relational      left-to-right   both

    - scope: keyword.operator.comparison.js
      match: >-
        (?x)
          ===  | # equality        left-to-right   both
          !==  | # equality        left-to-right   both
          ==   | # equality        left-to-right   both
          !=     # equality        left-to-right   both

    - scope: keyword.operator.arithmetic.js
      match: >-
        (?x)
          --   | # decrement       n/a             right-or-left
          \+\+ | # increment       n/a             right-or-left
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both

    - scope: keyword.operator.ternary.js
      match: '\?|:'

    - scope: meta.spread.js
      match: (?<!\.)(\.\.\.)([_$a-zA-Z][$\w]*)?
      captures:
        1: keyword.operator.spread.js
        2: variable.other.readwrite.js

    - scope: keyword.operator.accessor.js
      match: \.

  literal-labels:
    - match: >-
        (?x)
          (?<!\?)(?<!\?\s)(?=(
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))
          )\s*:)
      push:
        - match: ':'
          captures:
            0: punctuation.separator.key-value.js
          pop: true

        - include: literal-string

    - scope: constant.other.object.key.js
      match: (?<!\.|\?|\?\s)([_$a-zA-Z][$\w]*)\s*(:)
      captures:
        1: string.unquoted.label.js
        2: punctuation.separator.key-value.js

  literal-number:
    - scope: invalid.illegal.numeric.hex.js
      match: (?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)

    - scope: invalid.illegal.numeric.octal.js
      match: (?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)

    - scope: constant.numeric.js
      match: >-
        (?xi)
          (?:\B[-+])?
          (?:
            \b0b[0-1]*|                 # binary
            \b0o[0-7]*|                 # octal
            \b0x[0-9a-f]*|              # hex
            (
              \B\.[0-9]+|               # e.g. .999
              \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
            )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
          )

    - scope: constant.language.infinity.js
      match: (?:\B[-+]|\b)(Infinity)\b

  literal-punctuation:
    - scope: punctuation.terminator.statement.js
      match: \;

    - scope: meta.delimiter.comma.js
      match: ','

  literal-template-string:
    - match: ([a-zA-Z$_][\w$_]*)?(`)
      captures:
        1: entity.template-string.tag.name.js
        2: punctuation.definition.template-string.begin.js
      push:
        - meta_scope: string.template-string.js
        - match: '`'
          captures:
            0: punctuation.definition.template-string.end.js
          pop: true

        - include: string-content

        - match: \${
          captures:
            0: punctuation.template-string.element.begin.js
          push:
            - meta_scope: entity.template-string.element.js
            - match: '}'
              captures:
                0: punctuation.template-string.element.end.js
              pop: true

            - include: expression

  literal-regexp:
    # ignore ++, -- since they're uncommon, distinguishing them is not possible in sublime text, see:
    #   http://stackoverflow.com/questions/5519596/when-parsing-javascript-what-determines-the-meaning-of-a-slash
    - match: >-
        (?x)
          (?<=
            \.|\(|,|{|}|\[|;|,|<|>|<=|>=|==|!=|===|!==|\+|-|\*|%|\+\+|--|<<|>>|>>>|&|\||\^|!|~|&&|\|\||\?|:|=|\+=|-=|\*=|%=|<<=|>>=|>>>=|&=|\|=|\^=|/|/=|
            \Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|
            ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^
          )\s*
          (/)
          (?!/|\*|$)
      captures:
        1: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.regexp.js
        - match: (/)([gimyus]*)
          captures:
            1: punctuation.definition.string.end.js
            2: keyword.other.js
          pop: true

        - include: scope:source.regexp.js.es

  literal-string:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.quoted.single.js
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true

        - include: string-content

    - match: '"'
      captures:
        0: punctuation.definition.string.begin.js
      push:
        - meta_scope: string.quoted.double.js
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true

        - include: string-content

  string-content:
    - scope: constant.character.escape.newline.js
      match: \\\s*\n

    - scope: constant.character.escape.js
      match: \\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)

  literal-variable:
    # e.g. CONSTANT
    - scope: variable.other.constant.js
      match: '[A-Z][_$\dA-Z]*\b'

    # dollar variables
    - scope: variable.other.dollar.js
      match: '(\$)[$\w]+'
      captures:
        1: punctuation.dollar.js

    # e.g. Class.property
    - scope: meta.property.class.js
      match: >-
        (?x)
          \b([A-Z][$\w]*)\s*(\.)
          ([_$a-zA-Z][$\w]*)
      captures:
        1: variable.other.class.js
        2: keyword.operator.accessor.js
        3: variable.other.property.static.js

    # e.g. obj.property
    - scope: variable.other.object.js
      match: (?<!\.)[_$a-zA-Z][$\w]*\s*(?=[\[\.])
      captures:
        1: variable.other.object.js

    # e.g. obj.property
    - scope: meta.property.object.js
      match: (?<=\.)\s*[_$a-zA-Z][$\w]*
      captures:
        2: variable.other.property.js

    - scope: variable.other.readwrite.js
      match: '[_$a-zA-Z][$\w]*'

  support:
    # built-ins
    - scope: support.class.builtin.js
      match: \b(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap)\b

    - scope: support.function.js
      match: (?<!\.)\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b

    - scope: support.function.mutator.js
      match: \.(shift|sort|splice|unshift|pop|push|reverse)\b

    - scope: support.class.error.js
      match: (?<!\.)\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b

    # debugger
    - scope: keyword.other.js
      match: (?<!\.)\b(debugger)\b

    # dom
    - scope: support.type.object.dom.js
      match: (?<!\.)\b(document|window)\b

    - scope: support.constant.dom.js
      match: >-
        (?x)
          \b(
            ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|
            DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|
            WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR
          )\b

    # console
    - match: (?<!\.)\b(console)(?:(\.)(warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace))?\b
      captures:
        1: support.type.object.console.js
        2: keyword.operator.accessor.js
        3: support.function.console.js

    # node
    - scope: support.module.node.js
      match: (?<!\.)\b(assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)\b

    - match: (?<!\.)\b(process)(?:(\.)(stdout|stderr|stdin|argv|execPath|execArgv|env|exitCode|version|versions|config|pid|title|arch|platform|mainModule))?\b
      captures:
        1: support.type.object.process.js
        2: keyword.operator.accessor.js
        3: support.type.object.process.js

    - match: (?<!\.)\b(process)(?:(\.)(abort|chdir|cwd|exit|getgid|setgid|getuid|setuid|setgroups|getgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b
      captures:
        1: support.type.object.process.js
        2: keyword.operator.accessor.js
        3: support.function.process.js

    - match: (?<!\.)\b(exports|module(?:(\.)(exports|id|filename|loaded|parent|children)))?\b
      captures:
        1: support.type.object.module.js
        2: keyword.operator.accessor.js
        3: support.type.object.module.js

    - scope: support.type.object.node.js
      match: (?<!\.)\b(global|GLOBAL|root|__dirname|__filename)\b

    - scope: support.class.node.js
      match: \b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b

    # mustache
    - match: '{{'
      push:
        - meta_scope: meta.tag.mustache.js
        - match: '}}'
          pop: true
